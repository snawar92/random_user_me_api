# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module RandomUserMeApi
  class UserData < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cell

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :dni

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :dob

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :email

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :gender

    # TODO: Write general description for this method
    # @return [StructuredPostal]
    attr_accessor :location

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :md_5

    # TODO: Write general description for this method
    # @return [StructuredName]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nationality

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :password

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :phone

    # TODO: Write general description for this method
    # @return [StructuredPicture]
    attr_accessor :picture

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :registered

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :salt

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :sha_1

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :sha_256

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :username

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :version

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["cell"] = "cell"
        @hash["dni"] = "DNI"
        @hash["dob"] = "dob"
        @hash["email"] = "email"
        @hash["gender"] = "gender"
        @hash["location"] = "location"
        @hash["md_5"] = "md5"
        @hash["name"] = "name"
        @hash["nationality"] = "nationality"
        @hash["password"] = "password"
        @hash["phone"] = "phone"
        @hash["picture"] = "picture"
        @hash["registered"] = "registered"
        @hash["salt"] = "salt"
        @hash["sha_1"] = "sha1"
        @hash["sha_256"] = "sha256"
        @hash["username"] = "username"
        @hash["version"] = "version"
      end
      @hash
    end

    def initialize(cell = nil,
                   dni = nil,
                   dob = nil,
                   email = nil,
                   gender = nil,
                   location = nil,
                   md_5 = nil,
                   name = nil,
                   nationality = nil,
                   password = nil,
                   phone = nil,
                   picture = nil,
                   registered = nil,
                   salt = nil,
                   sha_1 = nil,
                   sha_256 = nil,
                   username = nil,
                   version = nil)
      @cell = cell
      @dni = dni
      @dob = dob
      @email = email
      @gender = gender
      @location = location
      @md_5 = md_5
      @name = name
      @nationality = nationality
      @password = password
      @phone = phone
      @picture = picture
      @registered = registered
      @salt = salt
      @sha_1 = sha_1
      @sha_256 = sha_256
      @username = username
      @version = version
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        cell = hash["cell"]
        dni = hash["DNI"]
        dob = hash["dob"]
        email = hash["email"]
        gender = hash["gender"]
        location = StructuredPostal.from_hash(hash["location"]) if hash["location"]
        md_5 = hash["md5"]
        name = StructuredName.from_hash(hash["name"]) if hash["name"]
        nationality = hash["nationality"]
        password = hash["password"]
        phone = hash["phone"]
        picture = StructuredPicture.from_hash(hash["picture"]) if hash["picture"]
        registered = hash["registered"]
        salt = hash["salt"]
        sha_1 = hash["sha1"]
        sha_256 = hash["sha256"]
        username = hash["username"]
        version = hash["version"]

        # Create object from extracted values
        UserData.new(cell,
                     dni,
                     dob,
                     email,
                     gender,
                     location,
                     md_5,
                     name,
                     nationality,
                     password,
                     phone,
                     picture,
                     registered,
                     salt,
                     sha_1,
                     sha_256,
                     username,
                     version)
      end
    end
  end
end
